name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build for ${{ matrix.label }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: linux-x64
            runner: ubuntu-latest
            python_arch: x64
            qemu: false
          - label: linux-arm64
            runner: ubuntu-latest
            python_arch: aarch64
            qemu: true
          - label: windows-x64
            runner: windows-latest
            python_arch: x64
            qemu: false
          - label: macos-x64
            runner: macos-14
            python_arch: x64
            qemu: false
          - label: macos-arm64
            runner: macos-14
            python_arch: arm64
            qemu: false

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU for cross-compilation
        if: matrix.qemu == true
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ matrix.python_arch }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python_arch }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python_arch }}-pip-

      - name: Install uv (fixed version)
        run: pip install --upgrade uv==0.8.14

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-${{ matrix.python_arch }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python_arch }}-uv-

      - name: Install dependencies
        run: |
          if uv sync --help | grep -q -- '--group'; then
            uv sync --group dev
          else
            echo "⚠️ uv without --group support, install all dependencies"
            uv sync
          fi

      - name: Build with PyInstaller (debug log)
        run: uv run pyinstaller main.py --onefile --name postbridge-${{ matrix.label }} --log-level=DEBUG

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: postbridge-${{ matrix.label }}
          path: dist/*

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate grouped changelog with links
        id: changelog
        run: |
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            RANGE="${PREV_TAG}..HEAD"
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
          else
            RANGE="HEAD"
            echo "## Initial release" > CHANGELOG.md
          fi
          echo "" >> CHANGELOG.md

          group() {
            local title="$1"
            local pattern="$2"
            local commits=$(git log --pretty=format:"%H|%s" $RANGE | grep -E "$pattern" || true)
            if [ -n "$commits" ]; then
              echo "### $title" >> CHANGELOG.md
              while IFS="|" read -r hash subject; do
                short_hash=$(echo "$hash" | cut -c1-7)
                commit_link="[$short_hash](${REPO_URL}/commit/${hash})"
                subject_with_links=$(echo "$subject" | sed -E "s/#([0-9]+)/[#\1](${REPO_URL}\/pull\/\1)/g")
                echo "- ${subject_with_links} (${commit_link})" >> CHANGELOG.md
              done <<< "$commits"
              echo "" >> CHANGELOG.md
            fi
          }

          group "✨ Features" "^feat"
          group "🐛 Fixes" "^fix"
          group "📚 Documentation" "^docs"
          group "♻ Refactoring" "^refactor"
          group "🧪 Tests" "^test"
          group "⚙ Build" "^build"
          group "🔧 Chore" "^chore"

          OTHER=$(git log --pretty=format:"%H|%s" $RANGE | grep -Ev "^(feat|fix|docs|refactor|test|build|chore)" || true)
          if [ -n "$OTHER" ]; then
            echo "### Other changes" >> CHANGELOG.md
            while IFS="|" read -r hash subject; do
              short_hash=$(echo "$hash" | cut -c1-7)
              commit_link="[$short_hash](${REPO_URL}/commit/${hash})"
              subject_with_links=$(echo "$subject" | sed -E "s/#([0-9]+)/[#\1](${REPO_URL}\/pull\/\1)/g")
              echo "- ${subject_with_links} (${commit_link})" >> CHANGELOG.md
            done <<< "$OTHER"
            echo "" >> CHANGELOG.md
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: artifacts/**/*
          make_latest: true